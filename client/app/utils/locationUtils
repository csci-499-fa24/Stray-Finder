import Cookies from 'js-cookie';

/**
 * Get the user's location from cookies or prompt for it if not available.
 * @returns {Promise<Object>} Resolves with { lat, lng } or rejects with an error.
 */
export const getLocation = async () => {
    const savedLocation = Cookies.get('userLocation');
    if (savedLocation) {
        return JSON.parse(savedLocation); // Return the parsed location if available in cookies
    }

    if (navigator.geolocation) {
        return new Promise((resolve, reject) => {
            navigator.geolocation.getCurrentPosition(
                (position) => {
                    const locationData = {
                        lat: position.coords.latitude,
                        lng: position.coords.longitude,
                    };
                    // Save the location to cookies
                    Cookies.set('userLocation', JSON.stringify(locationData), { expires: 1 });
                    resolve(locationData);
                },
                (error) => {
                    console.error('Error getting location:', error);
                    reject('Unable to retrieve location.');
                }
            );
        });
    } else {
        throw new Error('Geolocation is not supported by this browser.');
    }
};

/**
 * Clear the user's location data from cookies.
 */
export const clearLocation = () => {
    console.log('Clearing location data...');
    Cookies.remove('userLocation');
};
